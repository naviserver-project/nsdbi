[include version_include.man]

[manpage_begin nsdbi n [vset version]]
[moddesc {NaviServer Database Interface}]
[titledesc {Commands for querying an SQL database.}]

[description]
nsdbi provides an easy to use interface to databases.

[vset standard_options [subst {
	[opt [option "-db [arg name]"]] 
	[opt [option "-autonull"]] 
	[opt [option "-timeout [arg t]"]]
	[opt [option "-bind [arg bindSource]"]] 
}]]


[section {COMMANDS}]
[list_begin definitions]



[call [cmd dbi_1row] \
      [vset standard_options] \
      [opt [option "-array [arg name]"]] \
      [opt [arg --]] \
      [arg query]]

Execute a [arg query] which is expected to return exactly one row. If no rows are
returned then an error is raised.

[para]
The column values of the row are set as variables in the current stack frame
using the column names as Tcl variable names. If the [option -array] option
is given then an array of that name is created instead with the column names
corresponding to keys in the array.

[example_begin]
[cmd dbi_1row] {select first, last from peeps where id = 1}
set mysteryMan "$first $last"
[example_end]

Array-name syntax may be used to build an array result:

[example_begin]
[cmd dbi_1row] [option "-array [arg name]"] {select first, last from peeps where id = 1}
set mysteryMan "$name(first) $name(last)"

[cmd dbi_1row] {select first as 'name(first)', last as 'name(last)' from peeps where id = 1}
set mysteryMan "$name(first) $name(last)"
[example_end]




[call [cmd dbi_0or1row] \
      [vset standard_options] \
      [opt [option "-array [arg name]"]] \
      [opt [arg --]] \
      [arg query]]

Execute a [arg query] which is expected to return either zero rows or exactly one
row. If no rows are returned the result is 0 (false), otherwise it is 1 (true).
If more than 1 row is returned an error is raised.

[example_begin]
if {[lb][cmd dbi_0or1row] {select first, last from peeps where id = 1}[rb]} {
    set mysteryMan "$first $last"
} else {
    set mysteryMan "Benny Hill"
}
[example_end]




[call [cmd dbi_rows] \
      [vset standard_options] \
      [opt [option "-columns [arg varname]"]] \
      [opt [option "-max [arg nrows]"]] \
      [opt [option -append]] \
      [opt [option "-quote [arg none|html|js]"]] \
      [opt [option "-result [arg flatlist|lists|avlists|sets|dicts|dict]"]] \
      [opt [arg --]] \
      [arg query] \
      [opt [arg template]] \
      [opt [arg default]] ]

Execute a [arg query] which is expected to return zero or more rows. If no
rows are returned then the result is the empty string. Otherwise a
single, flat list of values is returned.

[example_begin]
foreach {first last} [lb][cmd dbi_rows] {select first, last from peeps}[rb] {
    append result "<li>$first $last</li>\n"
}
set result
<li>Dirty Harry</li>
<li>Jolly Roger</li>
[example_end]

[list_begin arguments]

[arg_def string [opt template]]

If [arg template] is given then for each row returned by the query, template
variables are substituted for the values of the corresponding columns. The
templated rows are concatenated and returned as a string.

[example_begin]
[cmd dbi_rows] {select first, last from peeps} {<li>$first $last</li>\n}
<li>Dirty Harry</li>
<li>Jolly Roger</li>
[example_end]

If a template variable name does not correspond to a column name in the result
then a Tcl variable by the same name is substituted.

[example_begin]
proc greet_the_people {{greeting "Hello"}} {
    [cmd dbi_rows] {select first, last from peeps} {
        $greeting, $first $last!
    }
}
greet_the_people "Yo"
Yo, Dirty Harry!
Yo, Jolly Roger!
[example_end]

There are also three special variables:

[list_begin definitions]

[def dbi(rowidx)]
The zero-based row index. The rows are numbered 0, 1, 2 etc.

[def dbi(rownum)]
The 1 based row number. The rows are numbered 1, 2, 3 etc.

[def dbi(parity)]
The string "even" or "odd", based on the rowidx.

[list_end]

[example_begin]
[cmd dbi_rows] {select first, last from peeps} {
    <tr class="$dbi(parity)"><th>$dbi(rownum)</th><td>$first $last</td></tr>
}
<tr class="even"><th>1</th><td>Dirty Harry</td></tr>
<tr class="odd"><th>2</th><td>Jolly Roger</td></tr>
[example_end]

If a template variable does not correspond to a column name, one of the
three special variables, or an existing Tcl variable, an error is raised.


[arg_def string [opt default]]

If no rows are returned then an error is raised, unless the [arg default]
argument is given in which case it becomes the complete result.

[example_begin]
[cmd dbi_rows] {select leader from government} {${leader}! \n} {nobody here but us chickens}
nobody here but us chickens
[example_end]


[list_begin options]

[opt_def -columns [arg varname]]

If the [option -columns] option is given then it is the name of a Tcl variable
which will be created to hold a list of the column names of the result.

[para]
This is useful in queries of the form "select * from ..." (but don't do that),
and for generic procedures which handle a variety of queries, such as formatting
queries as an HTML table.

[example_begin]
% [cmd dbi_rows] [option "-columns [arg cols]"] {select first, last from peeps}
{{Dirty Harry} {Jolly Roger}}

% set cols
{first last}
[example_end]

[opt_def -max [arg nrows]]

If the [option -max] option is given then it is an assertion that the query
will return no more than this number of rows. An error will be raised if
it does. If [option -max] is not given then the default [arg maxrows] for
the [term db] is used (see [cmd dbi_ctl] below).

[para]
Useful values for [option -max] are: [term >1000] when you're absolutely
sure that a particular query needs to return that much data (which would be
unusual on the web) and [term 1], in which case [cmd dbi_rows] acts like
[cmd dbi_0or1row], except returning the result instead of setting variables.

[opt_def -append]

If the [option -append] option is given then the result is appended efficiently
to the [term ADP] output buffer. If no ADP frame is active an error is raised.

[example_begin]
<ul>
<% [cmd dbi_rows] [option -append] [option "-quote html"] -- {select first, last from peeps} {<li>$first $last</li>} %>
</ul>
[example_end]

[opt_def "-quote [arg none|html|js]"]

Quote substituted variables (tcl variables or column values) in the
template according to the quoting type. valid quoting types are
[term none], 
[term html], or 
[term js].  This option can be only specified, when a
template is given.

[opt_def [option "-result [arg  flatlist|lists|avlists|sets|dicts|dict]"]] 

This option can be used to specify alternate formats of the result of
dbi_rows. Per default, the result is a flat list.

[list_begin itemized]

[item] [term flatlist]: the result of the query is returned as a flat
list. Use parameter [arg -columns] to obtain information the number of
columns and column names, (Default)

[item] [term lists]: every row of the result is returned as a list.

[item] [term avlists]: every row of the result is returned as a
attribute/value pair list, which can be used e.g. to set a tcl array.

[item] [term sets]: every row of the result is returned as a
ns-set. Note that this format is not well suited for caching.

[item] [term dicts]: every row of the result is returned as a Tcl dict.

[item] [term dict]: the whole result of the query is returned as a
large dict with row numbers.

[list_end]


[list_end]
[list_end]





[call [cmd dbi_dml] \
      [vset standard_options] \
      [opt [arg --]] \
      [arg query]]

Execute a [term DML] query: [term insert], [term update],
[term delete]; or [term DDL] query: [term "create table"] etc.  The result
will be the number of rows affected by the query, for example the number
of rows updated during an [term update] query.

If the query is not DML or DDL, an error will be thrown (the query is not run).



[call [cmd dbi_eval] \
    [opt [option "-db [arg name]"]] \
    [opt [option "-timeout [arg t]"]] \
    [opt [option "-transaction [arg isolation-level]"]] \
    [opt [arg --]] \
    [arg script] ]

Get a database handle and then evaluate [arg script], keeping the same handle
open for the duration.  Any [emph dbi] commands within the script will
use the same handle if the handle the command needs would have come from the
same [term db].

[para]
If the [option -transaction] option is given then the commands are run in a
transaction -- either all the commands succeed or they all fail. You may
nest transactions.

[para]
The following transaction [term isolation-levels] are supported. See your
specific database for details.

[list_begin options]

[opt_def readuncommitted]
May be abbreviated [option uncommitted].

[opt_def readcommited]
May be abbreviated [option committed].

[opt_def repeatableread]
May be abbreviated [option repeatable].

[opt_def serializable]

[list_end]



[call [cmd dbi_ctl] \
    [arg command] \
    [opt [arg ...]] ]

Control various aspects of a configured database.


[list_begin options]

[opt_def dblist]
Returns a list of [emph db] names available to the current virtual server. This
includes all globally configured databases plus, those loaded for this server.

[opt_def "default [opt [arg db]]"]
The name of the default [arg db] for the current server, if any. The default
db is used when the [option -db] option is not specified.

[para]
If a [arg db] name is specified it becomes the new default db, and the
return value is the old default db name.

[opt_def "driver [opt [arg db]]"]
Returns the name of the driver for the specified [arg db].

[opt_def "database [opt [arg db]]"]
Returns the name of the database product for the specified [arg db],
e.g. [term postgresql] or [term mysql].

[opt_def "bounce [opt [arg db]]"]
Mark all handle in [arg db] stale. At the next [term checkinterval], or
as active handles are returned to the [arg db] pool, their connection
with the database will be closed.

[opt_def "maxhandles [arg db] [opt [arg maxhandles]]"]
This setting controls how many handles, i.e. how many open connections, are
made to the underlying database. This number determines how many threads
may perform queries in parallel.

[para]
The default is 0 which means that each thread will open and cache a handle
when first needed. The handle will be released when the thread exits.
This is ideal for an embedded database such as [term sqlite] or the embedded
[term mysql] option, and is also appropriate if each thread which
accesses the db, such as the conn threads, always query the database
and your server can accommodate one database backend per thread.

[para]
If you have more threads accessing the database than you can afford
backends then you will need to pick a number for [arg maxhandles].
Choose too high and your database will suffer excessive locking and make
poor progress when your server is busy; memory consumption may be excessive.
Choose too low and threads will serialize waiting for handles. Make a
guess and then keep an eye on the [emph handlegets] and [emph handlemisses]
stats. If both numbers are high and [emph handlemisses] is high
relative to [emph handlegets] then you have a busy server which
is starved of database handles, and you should increase [arg maxhandles].

[opt_def "timeout [arg db] [opt [arg timeout]]"]
This is the timeout in seconds that a thread will wait for a handle
if none are available. You can override it for each command using
the [option -timeout] option. The default is 10 seconds.

[para]
Errors due to timeouts are tracked in the statistics.

[opt_def "maxrows [arg db] [opt [arg maxrows]]"]
This defines the default maximum number of rows a query may return. The default
is [emph 1000] which is high enough that any query returning more rows is
probably in error. You can override this setting on a per-query basis by
passing the [option -max] option to [cmd dbi_rows], or you can raise the
default if you routinely run into this limit. [emph -1] means no limit.

[opt_def "maxidle [arg db] [opt [arg maxidle]]"]
This is the number of seconds that an open handle will linger
unused, after which it is automatically closed (handles are checked every
[emph checkinterval] time units). The default is
0, which means handles are never closed due to idleness.

[opt_def "maxopen [arg db] [opt [arg maxopen]]"]
This is the maximum number of seconds a handle can remain open, regardless
of whether it is used or not. After this timeout, when the handle is
returned it will be automatically closed. The default is 0, which means
handle are not closed due to age.

[opt_def "maxqueries [arg db] [opt [arg maxqueries]]"]
If [arg maxqueries] is set then a handle will be closed after this
number of queries have been executed. The default is 0, which disables
this feature.

[para]
This option can be used to ensure that a cached plan for a prepared statement
does not become stale after many inserts/updates. Set it to something high, like
10,000 or 100,000, as setting it too low it may negate the benefit of prepared
statement caching.

[opt_def "stats [opt [arg db]]"]
Return the accumulated statistics for [arg db] in [term "array get"] format.

[example_begin]
array set stats [lb][cmd "dbi_ctl stats"] [emph db1][rb]
puts "handle miss rate: [lb]expr {($stats(handlegets) * 100) / $stats(handlemisses)}[rb]%"
[example_end]

The stats list contains the following keywords:

[list_begin definitions]

[def handlegets]
The number of times a handle was successfully retrieved from the pool. If
[emph maxhandles] is 0 this will increase by 1 for each thread that uses
the [arg db]. If [emph maxhandles] is more than 1, this number will increase
by 1 each time a [term dbi] command is executed, except for commands
within a [cmd dbi_eval] block where a single handle is reused with
the enclosed commands.

[def handlemisses]
The number of times a handle was requested but none was available, perhaps after
a timeout. If this number is high try increasing [arg maxhandles] (but make
sure that [emph handlefailures] is not significant).

[def handleopens]
The number of times a handle was connected/reconnected to the database. If
this number is high relative to [emph handlegets] then maybe one of
[emph maxidle], [emph maxopen] or [emph maxqueries] is too aggressive. See
also [emph bounces].

[def handlefailures]
The number of times a connection attempt to the database failed. This should
be 0, or very close.

[def queries]
Total number of queries by all handles for this [arg db]. This number always
increases.

[def agedcloses]
Number of times a handles was closed due to the [option maxopen] time expiring.

[def idlecloses]
Number of times a handle was closed due to the [option maxidle] time expiring.

[def oppscloses]
Number of times a handle was closed due to [option maxqueries] being reached.

[def bounces]
Number of times all handles for the [arg db] were bounced with the
[cmd "dbi_ctl bounce"] command.

[list_end]


[list_end]

[list_end]



[section {OPTIONS}]
[list_begin options]

[opt_def -db [arg name]]
The name of the [arg db] to query. If not specified, the default
[arg db] is used. Database names are defined each time a driver
module is loaded -- the module name is the db name.

[opt_def -timeout [arg t]]
Time to wait for a database handle if none available immediately. [arg t] is
in [cmd ns_time] format and is either an absolute time in the future if
large, or an offset from the current time if small.

[para]
If [option -timeout] is not specified then the [arg timeout] configuration
value is used (which defaults to 10 seconds).

[para]
If a handle does not become available during the timeout period a Tcl error
is thrown with [term errorCode] "NS_TIMEOUT". (If this is not caught the server
will return a [term "503 Busy"] response).

[opt_def -autonull]
When this option is specified, missing bind variables are treated as
NULL values. Per default  missing bind variables raise an exception.

[opt_def -bind [arg bindSource]] 
Specifies the source for bind variables. When the query contains bind
variables, the query uses per default variables from the current tcl
frame. When the [arg bindSource] is provided, this value might be an
[term ns_set], the name of a Tcl array, or a dict (list of name value
pairs).  Note that all variables are taken always from the same bind
source. A missing variable raises an error unless [option -autonull] 
is given.

[list_end]



[section {ARGUMENTS}]
[list_begin arguments]


[arg_def string query]
A query containing database specific SQL. The query may include
[term "bind variables"] of the form :variable - a name preceded by a single
colon. Do not quote bind variables. Always use bind variables in preference to
substituting Tcl variables into the query string.

[example_begin]
set x 1
[cmd dbi_1row] {select column from table where key = :x}
[example_end]

Bind variables automatically handle binary values. Simply pass a Tcl
[term "byte array"] type object and the raw bytes will be passed
directly to the database. All other types must be in a string representation
understood by the underlying database.

[para]
If a bind variable is the empty string "" then a [term NULL] is passed
to the database. Similarly, NULLs in result sets become the empty
string. When the option [term -autonull] is used, missing bind
variables are treated as NULL values.

[list_end]



[section CONFIGURATION]
        
[para]
To use the nsdbi commands you must first load a driver, e.g. the postgreSQL
driver [term nsdbipg]. Drivers can be loaded more than once to create
multiple pools of database handles, each with it's own configuration options.

[example_begin]
[cmd ns_section] "ns/modules" {
  [cmd ns_param]   [arg global1]       [arg nsdbipg.so]
  [cmd ns_param]   [arg global2]       [arg nsdbipg.so]
  ...
}
   
[cmd ns_section] "ns/server/server1/modules" {
  [cmd ns_param]   [arg db3]           [arg nsdbipg.so]
  [cmd ns_param]   [arg db4]           [arg nsdbipg.so]
  ...
}
  
[cmd ns_section] "ns/server/server1/module/[arg db4]" {
   
  # The following parameters can be changed at runtime using [cmd dbi_ctl]
  # and are explained above.
   
  [cmd ns_param]   [arg default]       true
  [cmd ns_param]   [arg maxhandles]    0
  [cmd ns_param]   [arg timeout]       10s
  [cmd ns_param]   [arg maxidle]       0s
  [cmd ns_param]   [arg maxopen]       0s
  [cmd ns_param]   [arg maxqueries]    0
  [cmd ns_param]   [arg maxrows]       1000
 
  # The following parameters are configured at server-startup.
 
  [cmd ns_param]   [arg user]          dbusername
  [cmd ns_param]   [arg password]      dbpassword
  [cmd ns_param]   [arg database]      dbname
  [cmd ns_param]   [arg cachesize]     1MB
  [cmd ns_param]   [arg checkinterval] 5m
}
[example_end]

Standard configuration options which are available with every driver:
        
[list_begin definitions]

[def "user"]
The [arg user] name with which to log in to the database.

[def "password"]
The password with which to log in to the database.

[def "database"]
Which [arg database] to connect to.

[def "cachesize"]
The number of bytes used to cache the query text of prepared statements.
The default is 1MB. There is one cache per-handle.

[def "checkinterval"]
Check for idle handles every [term checkinterval] seconds. The default
is 600 seconds.

[list_end]

Each driver may also takes driver-specific parameters.



[section EXAMPLES]


Select rows from a table using db [arg x]. Only rows in which column [arg a]
matches the bind variable will be returned:

[example_begin]
set a "someValue"
set rows [lb][cmd dbi_rows] [option "-db [arg x]"] {
    select a, b
    from table
    where a = :a
}[rb]
[example_end]

The following example shows a usage for templating where
the result of a query should be sent back in html form to the client

[example_begin]
ns_write "<ul>"
ns_write [lb][cmd "dbi_rows -quote html"] {select a, b  from table} {
   <li>a: $a</li>
}[rb]
ns_write "</ul>"
[example_end]

If the results of the query should be processed further in Tcl, 
it might be useful in some situations to treat every resulting tuple
as a Tcl dict.

[example_begin]
foreach d [lb][cmd "dbi_rows -result dicts"] {select a, b  from table}[rb] {
   ns_log notice "a: [lb]dict get $d a[rb]"
}
[example_end]


If the results of the query should be processed further in Tcl, 
it might be useful in some situations to treat every resulting tuple
as a Tcl dict.

[example_begin]
foreach row [lb][cmd "dbi_rows -result avlists"] {select a, b  from table}[rb] {
   array set r $row
   ns_log notice "b: $r(b)"
}
[example_end]

The following example shows how to bind a Tcl variable in a query and also
how to change the name of the result variable, which in this case is an array.

[example_begin]
set a 1
[cmd dbi_1row] {select foo as 'array(foo)' from table where a = :a}
ns_log notice "foo: $array(foo)"
[example_end]




[see_also nsdb subst]
[keywords NaviServer database sql query adp]

[manpage_end]
